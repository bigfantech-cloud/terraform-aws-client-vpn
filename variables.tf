variable "vpc_id" {
  description = "VPC ID to associate with VPN"
  type        = string
}

variable "subnets" {
  description = "Subnets to associte with VPN"
  type        = list(string)
}

variable "client_cidr_block" {
  description = "CIDR block for Client VPN's use. Must be different from VPN subnets CIDR, or VPN routes CIDR"
  type        = string
}

variable "saml_provider" {
  description = "SAML provider name. Used in SAML provider naming convention"
  type        = string
}

variable "saml_metadata_document" {
  description = <<-EOT
    SAML metadata XML document for Client VPN authentication, generated by an identity provider that supports SAML 2.0
    To create AWS Identity Center SAML, and SAML self service applicaiton ref: https://aws.amazon.com/blogs/security/authenticate-aws-client-vpn-users-with-aws-single-sign-on/
  EOT
  type        = string
}

variable "saml_self_service_metadata_document" {
  description = <<-EOT
      SAML metadata XML document for Client VPN Self Service, generated by an identity provider that supports SAML 2.0
      To create AWS Identity Center SAML, and SAML self service applicaiton ref: https://aws.amazon.com/blogs/security/authenticate-aws-client-vpn-users-with-aws-single-sign-on/
  EOT
  type        = string
  default     = null
}

# variable "secret_path_format" {
#   description = <<-EOT
#   The path format to use when writing secrets to the certificate backend.
#   The certificate secret path will be computed as `format(var.secret_path_format, module.this.id, var.secret_extensions.certificate)`
#   and the private key path as `format(var.secret_path_format, module.this.id, var.secret_extensions.private_key)`.
#   Thus by default, if `module.this.id`=`bigfantech-cloud`, then the resulting secret paths for the self-signed certificate's
#   PEM file and private key will be `/bigfantech-cloud.pem` and `/bigfantech-cloud.key`, respectively.
#   This variable can be overridden in order to create more specific certificate backend paths.
#   EOT
#   type        = string
#   default     = "/%s.%s"

#   validation {
#     condition     = can(substr(var.secret_path_format, 0, 1) == "/")
#     error_message = "The secret path format must contain a leading slash."
#   }
# }

variable "dns_servers_ip" {
  description = <<-EOT
    List of upto 2 DNS IP to use for DNS resoulution
    If no DNS server is specified, the DNS address of the connecting device is used. Default = null
  EOT
  type        = list(string)
  default     = null
}

variable "session_timeout_hours" {
  description = "VPN session timeout in hours. Valid values: 8, 10, 12, 24 . Default = 8"
  type        = number
  default     = 8
}

variable "vpn_routes_config" {
  description = "List of Map of (optional)'authorization_group_name', (optional)`authorization_group_id`, 'target_cidr', 'description'"
  type = list(object({
    authorization_group_name = optional(string)
    authorization_group_id   = optional(string)
    target_cidr              = string
    description              = string
  }))
  default = []
}

variable "split_tunnel" {
  description = "Whether to enable VPN split tunnel. Default = false"
  type        = bool
  default     = false
}

variable "cloudwatch_log_retention_in_days" {
  description = "VPN CloudWatch log retention in days. Default = 90"
  type        = number
  default     = 90
} 
